# Next.js 15 + Tailwind CSS 4 Portfolio Project

## Project Overview
This is a Next.js 15 portfolio project deployed on Vercel, using Tailwind CSS 4 for styling.

## Tech Stack
- **Framework**: Next.js 15.4.4 with App Router
- **React**: 19.1.0
- **Styling**: Tailwind CSS 4 (latest)
- **TypeScript**: Latest
- **Deployment**: Vercel
- **Development**: Turbopack enabled

## Project Structure
```
├── app/                 # App Router directory (Next.js 15)
│   ├── globals.css     # Global styles with Tailwind CSS 4 @import
│   ├── layout.tsx      # Root layout with Geist fonts
│   ├── page.tsx        # Home page component
│   ├── favicon.ico     # Site favicon
│   └── ...             # Other pages and components
├── public/             # Static assets
├── next.config.ts      # Next.js configuration
├── package.json        # Dependencies (Next.js 15.4.4, React 19, Tailwind 4)
├── postcss.config.mjs  # PostCSS config for Tailwind CSS 4
├── tsconfig.json       # TypeScript configuration
└── .cursorrules        # This MCP context file
```

## Current Setup Details
- **Fonts**: Geist Sans and Geist Mono from Google Fonts
- **Theme**: CSS variables with automatic dark mode via prefers-color-scheme
- **Styling**: Tailwind CSS 4 with @theme inline configuration
- **Development**: Turbopack enabled for faster builds

## Development Guidelines

### Next.js 15 Specific Features
- Use App Router (app/ directory) for all routing
- Leverage Server Components by default
- Use Client Components only when necessary (add 'use client' directive)
- Utilize built-in optimization features (Image, Link, etc.)
- Take advantage of Turbopack for faster development builds

### Tailwind CSS 4 Guidelines
- Use the new CSS-first approach with `@import "tailwindcss"`
- Leverage CSS variables and modern features
- Use @theme inline for custom theme configuration
- Current theme variables:
  - `--color-background` and `--color-foreground` for light/dark mode
  - `--font-sans` (Geist) and `--font-mono` (Geist Mono) for typography
- Dark mode implemented via `prefers-color-scheme: dark`
- Take advantage of improved performance and smaller bundle sizes
- Use the new PostCSS plugin (@tailwindcss/postcss)

### Component Patterns
- Create reusable components in app/components/
- Use TypeScript interfaces for props
- Implement proper error boundaries
- Use Suspense for loading states
- Follow React 19 best practices

### Styling Best Practices
- Use Tailwind utility classes primarily
- Leverage the built-in CSS variables: `text-foreground`, `bg-background`
- Use `font-sans` and `font-mono` classes for the Geist fonts
- Create custom CSS for complex animations or unique designs
- Use CSS modules for component-specific styles when needed
- Implement responsive design with Tailwind breakpoints
- Extend the theme using @theme inline in globals.css when needed
- Use CSS variables for theme customization following the existing pattern

### Performance Optimization
- Optimize images with next/image
- Use dynamic imports for code splitting
- Implement proper caching strategies
- Minimize client-side JavaScript
- Use Server Components to reduce bundle size

### File Naming Conventions
- Use kebab-case for files and directories
- Use PascalCase for React components
- Use camelCase for functions and variables
- Add .client.tsx or .server.tsx suffixes when component type needs to be explicit

### Code Quality
- Use TypeScript strictly (no any types)
- Implement proper error handling
- Add loading and error states
- Use semantic HTML elements
- Ensure accessibility compliance
- Write descriptive commit messages

## Common Commands
- `npm run dev` - Start development server with Turbopack
- `npm run build` - Build for production
- `npm run start` - Start production server
- `npm run lint` - Run ESLint

## Deployment
- Deployed on Vercel with automatic deployments
- Environment variables configured in Vercel dashboard
- Build optimizations handled automatically

## AI Assistant Instructions
When helping with this project:
1. Always use Next.js 15 App Router patterns
2. Implement TypeScript strictly
3. Use Tailwind CSS 4 syntax and features
4. Consider Server vs Client Components appropriately
5. Follow modern React 19 patterns
6. Optimize for performance and SEO
7. Ensure responsive design
8. Maintain clean, readable code structure
9. Use semantic HTML and accessibility best practices
10. Consider Vercel deployment optimizations

## Dependencies to Consider
When suggesting new packages, prefer:
- Packages compatible with React 19
- Libraries that work well with Server Components
- Lightweight alternatives when possible
- Packages with good TypeScript support
- Tools that integrate well with Vercel deployment